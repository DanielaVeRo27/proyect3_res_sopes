package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net"
	"sync/atomic"

	amqp "github.com/rabbitmq/amqp091-go"
	"google.golang.org/grpc"
)

type WeatherTweet struct {
	Municipality string `json:"municipality"`
	Temperature  int32  `json:"temperature"`
	Humidity     int32  `json:"humidity"`
	Weather      string `json:"weather"`
}

var messageCount int64
var channel *amqp.Channel

func main() {
	fmt.Println("üöÄ Starting Go RabbitMQ Writer Service")

	// Conectar a RabbitMQ
	conn, err := amqp.Dial("amqp://default_user_pSqIHyPHkVx5_JyTINs:OKVZmdiOw6vAteDhXJ7z3sTIwFtguUCs@rabbitmq-cluster:5672/")
	if err != nil {
		log.Fatalf("Failed to connect to RabbitMQ: %v", err)
	}
	defer conn.Close()

	channel, err = conn.Channel()
	if err != nil {
		log.Fatalf("Failed to open a channel: %v", err)
	}
	defer channel.Close()

	// Declarar la cola
	_, err = channel.QueueDeclare(
		"weather-tweets",
		false,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		log.Fatalf("Failed to declare a queue: %v", err)
	}

	fmt.Println("‚úÖ Connected to RabbitMQ on rabbitmq-cluster:5672")

	startGRPCServer()
}

func startGRPCServer() {
	listener, err := net.Listen("tcp", "0.0.0.0:50053")
	if err != nil {
		log.Fatalf("Failed to listen on port 50053: %v", err)
	}

	grpcServer := grpc.NewServer()
	fmt.Println("üì° gRPC Server listening on 0.0.0.0:50053")

	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("gRPC Server error: %v", err)
	}
}

func PublishToRabbitMQ(tweet WeatherTweet) error {
	count := atomic.AddInt64(&messageCount, 1)

	data, err := json.Marshal(tweet)
	if err != nil {
		return err
	}

	err = channel.Publish(
		"",
		"weather-tweets",
		false,
		false,
		amqp.Publishing{
			ContentType: "application/json",
			Body:        data,
		},
	)
	if err != nil {
		fmt.Printf("‚ùå Error publishing to RabbitMQ: %v\n", err)
		return err
	}

	fmt.Printf("[RabbitMQ Writer - Message #%d] Published: %s\n", count, string(data))
	return nil
}
